name: Change Octocat style

on:
  issues:
    types: [opened, edited]

jobs:
  detect_style_type:
    name: Detect style type
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'Octocat style')

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Get Style type
      uses: actions/github-script@v3
      id: get-style-type
      with:  
        result-encoding: json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log(context.payload.issue.body)
          let rgx = /\-\s\[x\]\s(.*)/gm
          let rgxMatch = rgx.exec(context.payload.issue.body)
          if (rgxMatch) {
            let checkValue = rgxMatch[1]
            if (checkValue.includes('<!--checked-->')) {
              checkValue = checkValue.replace('<!--checked-->', '')
              return {
                value: checkValue,
                alreadyChecked: true
              }
            } else {
              return {
                value: checkValue,
                alreadyChecked: false
              }
            }
          }
    - name: debug
      run: env
    - name: Add follow-up content
      if: steps.get-style-type.outputs.result && steps.get-style-type.outputs.result.alreadyChecked == false
      uses: actions/github-script@v4
      id: add-follow-up
      env:
        STYLE_TYPE_VALUE: ${{ steps.get-style-type.outputs.result.value }}
        STYLE_TYPE_ALREADY_CHECK: ${{ steps.get-style-type.outputs.result.alreadyChecked }}
      with:  
        result-encoding: json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs')
          let styleType = process.env.STYLE_TYPE_VALUE
          let newBody = context.payload.issue.body.replace(styleType, `${styleType}<!--checked-->`)
          fs.readFile(`./.github/styles/${styleType}.md`, 'utf8' , (err, data) => {
            if (err) {
              console.error(err)
              return
            } else {
              console.log(data)
            }
          })
          // let fup // load from disk
          // newBody = newBody + fup
          // update issue